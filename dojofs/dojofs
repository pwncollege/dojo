#!/usr/bin/env python

import re
import stat
import sys
import time
from datetime import datetime
from pathlib import Path

import fuse
import docker
from fuse import FUSE, Operations, fuse_get_context


docker_client = docker.from_env()


class DojoFS(Operations):
    def __init__(self):
        self.files = {"/": []}

    def path(self, path):
        def decorator(cls):
            if not path.startswith("/"):
                raise ValueError("Error: path must start with '/'")
            components = path.strip("/").split("/")
            if not all(component for component in components):
                raise ValueError("Error: path cannot contain empty components")
            subpath = "/"
            for component in components:
                directory = self.files.setdefault(subpath, [])
                if not isinstance(directory, list):
                    raise ValueError(f"Error: path '{subpath}' is already a file, cannot add directory '{subpath}'")
                subpath = f"{subpath.rstrip('/')}/{component}"
                if subpath not in directory:
                    directory.append(subpath)
            self.files[path] = cls()
            return cls
        return decorator

    def getattr(self, path, fh=None):
        file = self.files.get(path)
        if not file:
            raise fuse.FuseOSError(fuse.errno.ENOENT)
        if isinstance(file, list):
            created_time = get_container_created_unix_time()
            return dict(
                st_mode=(stat.S_IFDIR | 0o755),
                st_nlink=(2 + sum(1 for path in file if isinstance(self.files.get(path), list))),
                st_ctime=created_time,
                st_mtime=created_time,
                st_atime=created_time,
            )
        else:
            return file.getattr(path, fh)

    def readdir(self, path, fh):
        directory = self.files.get(path)
        if directory is None:
            raise fuse.FuseOSError(fuse.errno.ENOENT)
        if not isinstance(directory, list):
            raise fuse.FuseOSError(fuse.errno.ENOTDIR)
        return [".", "..", *(path.split("/")[-1] for path in directory)]

    def read(self, path, size, offset, fh):
        file = self.files.get(path)
        if not file:
            raise fuse.FuseOSError(fuse.errno.ENOENT)
        if isinstance(file, list):
            raise fuse.FuseOSError(fuse.errno.EISDIR)
        return file.read(path, size, offset, fh)


dojo_fs = DojoFS()


def get_container_context():
    uid, gid, pid = fuse_get_context()
    container_re = re.compile(r"/containers/([0-9a-f]+)/hostname")
    mount_info = Path(f"/proc/{pid}/mountinfo").read_text()
    container_id = match.group(1) if (match := container_re.search(mount_info)) else None
    if not container_id:
        return None

    try:
        container = docker_client.containers.get(container_id)
    except docker.errors.NotFound:
        return None
    return container


def get_container_created_unix_time():
    container = get_container_context()
    if not container:
        return 0
    timestamp = container.attrs["Created"]
    if "." in timestamp:
        timestamp = timestamp[:timestamp.index(".") + 7] + "Z"
    created_time = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%fZ")
    created_unix_time = time.mktime(created_time.timetuple())
    return created_unix_time


@dojo_fs.path("/workspace/privileged")
class PrivilegedFile:
    def getattr(self, path, fh=None):
        created_time = get_container_created_unix_time()
        return dict(
            st_mode=(stat.S_IFREG | 0o444),
            st_nlink=1,
            st_size=4096,
            st_ctime=created_time,
            st_mtime=created_time,
            st_atime=created_time,
        )

    def read(self, path, size, offset, fh):
        container = get_container_context()
        if not container:
            raise fuse.FuseOSError(fuse.errno.EIO)
        mode = container.labels.get("dojo.mode")
        content = b"1\n" if mode == "privileged" else b"0\n"
        return content[offset:offset + size]


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <mountpoint>")
        sys.exit(1)

    mountpoint = sys.argv[1]
    Path(mountpoint).mkdir(parents=True, exist_ok=True)
    dojo_fs.__class__.__name__ = "dojofs"
    FUSE(dojo_fs, mountpoint, foreground=True, allow_other=True)
