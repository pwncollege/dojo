#!/bin/sh

data_mnt_opts="$(findmnt -n -o OPTIONS /data)"
if [ "$?" -ne 0 ]; then
    echo '[!] Data mount does not exist. Please start the dojo with a data mount (`-v /data:/data`).'
    exit 1
fi
echo '[+] Data mount exists.'
mount --make-shared /data

if printf '%s' "$data_mnt_opts" | grep -q '\bnosuid\b'; then
    echo '[!] Data mount is mounted nosuid. Please check the mount options on the data directory.'
    exit 1
fi

>> /data/config.env

> /data/.config.env
define () {
    name="$1"
    default="$2"
    re="^${name}=\K.*"
    current="$(env | grep -oP ${re})"
    defined="$(grep -oP ${re} /data/config.env)"
    value="${current:-${defined:-$default}}"
    echo "${name}=${value}" >> /data/.config.env
}
DEFAULT_DOJO_HOST=localhost.pwn.college

define DOJO_HOST "${DEFAULT_DOJO_HOST}"
define VIRTUAL_HOST "${DEFAULT_DOJO_HOST}"
define LETSENCRYPT_HOST "${DEFAULT_DOJO_HOST}"
define DOJO_ENV development
define DOJO_WORKSPACE core
define WORKSPACE_KEY
define WORKSPACE_NODE 0
define SECRET_KEY $(openssl rand -hex 16)
define UBUNTU_VERSION 20.04
define INTERNET_FOR_ALL False
define MAIL_SERVER
define MAIL_PORT
define MAIL_USERNAME
define MAIL_PASSWORD
define MAIL_ADDRESS
define DOCKER_USERNAME
define DOCKER_TOKEN
define DISCORD_CLIENT_ID
define DISCORD_CLIENT_SECRET
define DISCORD_BOT_TOKEN
define DISCORD_GUILD_ID
define DEFAULT_INSTALL_SELECTION no # default to not installing tools
define INSTALL_IDA_FREE no # explicitly disable -- only for free dojos
define INSTALL_BINJA_FREE no # explicitly disable -- only for free dojos
define INSTALL_WINDOWS no # explicitly disable
define DB_HOST db
define DB_NAME ctfd
define DB_USER ctfd
define DB_PASS ctfd
define DB_EXTERNAL no # change to anything but no and the db container will not start mysql
define BACKUP_AES_KEY_FILE
define S3_BACKUP_BUCKET
define AWS_DEFAULT_REGION
define AWS_ACCESS_KEY_ID
define AWS_SECRET_ACCESS_KEY
define MAC_HOSTNAME
define MAC_USERNAME
define MAC_KEY_FILE
define MAC_GUEST_CONTROL_FILE

mv /data/.config.env /data/config.env
. /data/config.env

mkdir -p /data/workspace/nix
mkdir -p /data/workspacefs/bin

mkdir -p /data/homes
if [ "$(findmnt -n -o FSTYPE /data/homes)" != "btrfs" ] && [ "$(findmnt -n -o FSTYPE /data)" != "btrfs" ]; then
    if [ ! -f /data/homes/btrfs.img ]; then
        echo "[+] Creating home storage"
        truncate -s 256G /data/homes/btrfs.img
        mkfs.btrfs /data/homes/btrfs.img
    fi
    loop_device=$(losetup -f)
    if [ ! -e "$loop_device" ]; then
        mknod $loop_device b 7 $(echo $loop_device | tr -cd '0-9')
        chmod --reference=/dev/loop0 $loop_device
        chown --reference=/dev/loop0 $loop_device
    fi
    losetup "$loop_device" /data/homes/btrfs.img
    mount "$loop_device" /data/homes
fi
btrfs quota enable /data/homes

if [ ! -d /data/ssh_host_keys ]; then
    mkdir -p /data/ssh_host_keys
    rm /etc/ssh/ssh_host_*_key*
    ssh-keygen -A -m PEM
    for key in $(ls /etc/ssh/ssh_host_*_key*); do
        cp -a $key /data/ssh_host_keys
    done
fi
ssh-keyscan github.com > /data/ssh_host_keys/ssh_known_hosts
for file in $(ls /data/ssh_host_keys/*); do
    cp -a $file /etc/ssh
done

if [ ! -z ${BACKUP_AES_KEY_FILE+x} ] && [ ! -f ${BACKUP_AES_KEY_FILE} ]
then
    openssl rand 214 > "${BACKUP_AES_KEY_FILE}"
fi

# Handle networking issue on Ubuntu 22.04 host (e.g., GitHub Codespaces)
kernel_version=$(uname -r)
case "$kernel_version" in
    6.5.*)
        echo '[+] Detected Linux kernel version 6.5.*. Switching to legacy iptables.'
        update-alternatives --set iptables /usr/sbin/iptables-legacy
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
        ;;
esac

dojo-node refresh

iptables -N DOCKER-USER
iptables -I DOCKER-USER -i workspace_net -j DROP
for host in $(cat /opt/pwn.college/user_firewall.allowed); do
    iptables -I DOCKER-USER -i workspace_net -d $(host $host | awk '{print $NF; exit}') -j ACCEPT
done
iptables -I DOCKER-USER -i workspace_net -s 10.0.0.0/24 -m conntrack --ctstate NEW -j ACCEPT
iptables -I DOCKER-USER -i workspace_net -d 10.0.0.0/8 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -I DOCKER-USER -i workspace_net -s 192.168.42.0/24 -m conntrack --ctstate NEW -j ACCEPT
iptables -I DOCKER-USER -i workspace_net -d 192.168.42.0/24 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
