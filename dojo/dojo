#!/bin/bash -e

cd /opt/pwn.college

if [ -n "$1" ]
then
    ACTION="$1"
    shift
else
    ACTION="help"
fi

DOCKER_ARGS=${DOCKER_ARGS:--i}
[ -t 0 ] && DOCKER_ARGS="-t $DOCKER_ARGS"

if [ "$ACTION" != "init" ] && [ -f /data/config.env ]; then
    . /data/config.env
fi

case "$ACTION" in
    # HELP: up: bring the dojo up
    "up")
        dojo sync
        dojo compose up -d --build --remove-orphans "$@"
        ;;

    # HELP: update: update dojo files (warning: does `git pull`), rebuild containers, and restart any changed services
    "update")
        git pull
        dojo up "$@"
        ;;

    # HELP: sync: sync changed dojo files
    "sync")
        cp -rv --preserve=timestamps ctfd/* /opt/CTFd/
        cp -rv --preserve=timestamps dojo_plugin /opt/CTFd/CTFd/plugins/
        cp -rv --preserve=timestamps dojo_theme /opt/CTFd/CTFd/themes/
        ;;

    # HELP: enter [ -s ] USER_ID: enter a user's running container. -s for entering as root
    "enter")
        USER_SWITCH="--user=1000"
        if [ "$1" == "-s" ]
        then
            USER_SWITCH="--user=0"
            shift
        fi
        DOJO_UID="$1"
        [ -n "${DOJO_UID//[0-9]}" ] && DOJO_UID=$(echo "select id from users where name='$DOJO_UID'" | dojo db -qAt)
        CONTAINER="user_$DOJO_UID"
        shift

        NODES=( unix:///var/run/docker.sock )
        NODES+=( $(wg | grep "allowed ips" | awk -F " |/" '{print $5}') )
        for NODE in ${NODES[@]}
        do
            if docker -H $NODE ps | grep -q "$CONTAINER$"
            then
                docker -H "$NODE" exec $DOCKER_ARGS $USER_SWITCH "$CONTAINER" bash
                exit $?
            fi
        done
        ;;

    # HELP: compose ARGS: run a docker compose command with the config.env file loaded
    "compose")
        profile="main"
        [ "$WORKSPACE_NODE" -gt 0 ] && profile="workspace"
        docker compose --env-file=/data/config.env --profile "$profile" "$@"
        ;;

    # HELP: node: run a dojo node command
    "node")
        dojo-node "$@"
        ;;

    # HELP: flask: drop into a flask shell in the ctfd container
    "flask")
        docker exec $DOCKER_ARGS ctfd flask shell "$@"
        ;;

    # HELP: db: launch a mysql client session, connected to the ctfd db
    "db")
        docker exec $DOCKER_ARGS db psql "$@"
        ;;

    # HELP: backup: does a dojo db backup into the `/data/backups` directory.
    "backup")
        mkdir -p /data/backups
        BACKUP_PATH="/data/backups/db-$(date -Iseconds).dump"
        docker exec db pg_dump -Fc > "$BACKUP_PATH"
        echo "Created backup at $BACKUP_PATH"
        ;;

    # HELP: restore PATH: restores a dojo db backup. Path arg is relative to the `/data/backups` directory
    "restore")
        BACKUP_PATH="/data/backups/$1"
        if [ -f "$BACKUP_PATH" ]; then
            docker exec -i db pg_restore --clean --if-exists --dbname="$DB_NAME" < "$BACKUP_PATH"
        else
            echo "Error: missing file to restore from" >&2
        fi
        ;;

    # HELP: cloud-backup: upload the last day's worth of cloud backups to S3, but encrypt it at rest
    "cloud-backup")
        [ -z ${BACKUP_AES_KEY_FILE+x} ]  && (echo "To use cloud backup, BACKUP_AES_KEY_FILE must be set"; exit -1)
        [ -f $BACKUP_AES_KEY_FILE ] || (echo "To use cloud backup, BACKUP_AES_KEY_FILE must be set to a file, but is $BACKUP_AES_KEY_FILE instead"; exit -1)
        [ -z ${S3_BACKUP_BUCKET+x} ] && (echo "To use cloud backup, S3_BACKUP_BUCKET must be set to the S3 bucket to use"; exit -1)
        set -e
        for f in $(find /data/backups -mtime -1 -type f)
        do
            BACKUP_FILENAME="$(basename $f).enc"
            OUT_FILE="/tmp/$BACKUP_FILENAME"
            openssl enc -in "$f" -out "$OUT_FILE" -e -aes256 -pbkdf2 -kfile "$BACKUP_AES_KEY_FILE"
            echo "created encrypted $OUT_FILE"

            AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} aws s3 cp "$OUT_FILE" "s3://$S3_BACKUP_BUCKET/$BACKUP_FILENAME"
            echo "backed up $OUT_FILE to S3 bucket $S3_BACKUP_BUCKET"
            rm "$OUT_FILE"
        done
        ;;

    # HELP: vscode: start vscode tunnel
    "vscode")
        dojo-vscode "$@"
        ;;

    # HELP: logs: display dojo logs
    "logs")
        journalctl -u pwn.college -f --no-tail
        ;;

    # HELP: wait: wait for the dojo to finish starting
    "wait")
        dojo logs | while IFS= read -r line; do
            echo "$line"
            case "$line" in
                *"Finished pwn.college.service - pwn.college docker compose service"*)
                    exit 0
                    ;;
                *"Failed to start pwn.college.service - pwn.college docker compose service."*)
                    exit 1
                    ;;
            esac
        done
        ;;

    # HELP: init: main entry point for the docker image
    "init")
        echo "[+] Initializing dojo."
        dojo-init
        echo "[+] Starting systemd. If this is the first start, the challenge container"
        echo "    will be built, which will take a very long time."
        exec /usr/bin/systemd
        ;;

    # HELP: help: displays this help
    "help")
        echo "Usage: $0 COMMAND [ ARG ]"
        echo
        echo "COMMANDS:"
        echo
        cat "$0" | grep "[H]ELP" | sed -e "s/.*H[E]LP: /\t/"
        ;;

    *)
        echo "Unknown command."
        echo ""
        "$0" help
        exit 1
        ;;
esac
